The driver program.(Pacman class)
The constructor Pacman()
Pacman()
Step 1: Start
Step 2: initUI()
Step 3: End

The initUI() Method
initUI()
Step 1: Start
Step 2: add(new Board())
            setTitle(“Pacman”)
            setDefaultCloseOperation(EXIT_ON_CLOSE)
            setSize(300,420)
            setLocationRelativeTo(null)
Step 3: End

Main()
Step 1: Start
Step 2: EventQueue.invokeLater(()-> {
            Pacman ex=new Pacman()
            ex.setVisible(true);
            });
Step 3: End
class Board:
The board constructor
Board()
Step 1: initGame()
Step 2:End

The addNotify Method
@Override
addNotify()
Step 1: Start
Step 2: super.addNotify()
Step 3: initGame()
Step 4:End
class Board
The initGame() method
initGame()
Step 1: Start
Step 2: Declare life=3, score=0, N_Ghosts=6, currentSpeed=3
Step 3: initLevel()
             playGame()
             checkMaze()
             movePacman()
             moveGhost() 
Step 4: End.

The initLevel() method
initLevel()
Step 1: Start
Step 2: for i=0 to N_Block*N_Block
             do:
                  screenData[i]=levelData[i]
             endfor
Step 3: End.
class Board
The continueLevel() method
continueLevel()
Step 1: Start
Step 2: Declare dx=1
Step 3: for i=0 to N_GHOSTS
            do
ghost_x[i]=4*BLOCK_SIZE
ghost_y[i]=4*BLOCK_SIZE
ghost_dy[i]=0
ghost_dx[i]=dx
dx=-dx
                 	           random=Math.random()*(currentSpeed+1)
                	          if(random>currentSpeed)
                	          then: random=currentSpeed
                             endif
                             ghostSpeed[i]=validSpeeds[random]
            endfor
Step 4: pacman_x=7*BLOCK_SIZE
            pacman_y=11*BLOCK_SIZE
            pacman_dx=0
            pacman_dy=0
            dying=false
Step 5: End
class Board
The playGame() method
playGame()
Step 1: Start
Step 2: if(dying)
             then: death()
             else:
                    movePacman()
                    checkMaze()
             endif
Step 3: End
The death() method
death()
Step 1: Start
Step 2: life-=1
Step 3: if(life==0)
            then: inGame=false
            endif
            continueLevel()
Step 4: End
class Board
The checkMaze() method
checkMaze()
Step 1: Start
Step 2: finished=true,i=0
Step 3: while (i<N_BLOCKS*N_BLOCKS && finished)
             do
                   if(screenData[i] & 48!=0)
                   then: finished=true
                   endif
                   i++
                   if(finished)
                   then: score+=50
                            if(N_GHOSTS<MAX_GHOSTS)
                            then: N_GHOSTS+=1
                            endif
                            if(currentSpeed<maxSpeed)
                            then: currentSpeed+=1
                            endif
                            initLevel()
                   endif
              endwhile
Step 4: End
class Board
The movePacman() method(most important)
movePacman()
Step 1: Start
Step 2: if(pacman_x%BLOCK_SIZE==0 && pacman_y%BLOCK_SIZE==0)
             then: pos=pacman_x/BLOCK_SIZE+N_BLOCKS*( pacman_y/BLOCK_SIZE)
                      ch=screenData[pos];
Step 3: if(dx!=0 && dy!=0)
             then:
                     if(pacman_x<Size_x && pacman_y<Size_y)
                     then:
                             pacman_x=pacman_x+currentSpeed*dx
                             pacman_y=pacman_y+currentSpeed*dy
                     else:  
                              pacman_x=pacman_x
                              pacman_y=pacman_y
                     endif
               endif
Step 4: End
class Board
The moveGhosts() method(most important)
moveGhosts()
Step 1: Start
Step 2: for i=0 to N_GHOSTS
             do:
if(ghosts_x[i]%BLOCK_SIZE==0 && ghosts_y[i]%BLOCK_SIZE==0)
             then: pos=ghosts_x[i]/BLOCK_SIZE+N_BLOCKS*( ghosts_y[i]/BLOCK_SIZE)
                      ch=screenData[pos];
endif
 if(dx!=0 && dy!=0)
             then:
                     if(ghosts_x[i]<Size_x && ghosts_y[i]<Size_y)
                     then:
                             ghosts_x[i]=ghosts_x[i]+currentSpeed*dx_ghosts
                             ghosts_y[i]=ghosts_y[i]+currentSpeed*dy_ghosts
                     else:  
                             ghosts_x[i]=ghosts_x[i]
                             ghosts_y[i]=ghosts_y[i]
                     endif
               endif

 if(pacman_x>ghosts_x[i]-12 && pacman_x<ghosts_x[i]+12 && pacman_y>ghosts_y[i]-12 && pacman_y>ghosts_y[i]+12 && inGame)
             then: inGame=false
                      dying=true
             endif
endfor
Step 3: End
class Board
The keyPressed function(most important)
@Override
keyPressed(KeyEvent e)
Step 1: Start.
Step 2: key=e.getKeyCode()
Step 3: if(inGame)
            then:
                    if (key=KeyEvent.VK_LEFT)
                    then:  dx=-1
                              dy=0 
                     else if(key=KeyEvent.VK_RIGHT)
                     then:  dx=1
                               dy=0
                      else if(key=KeyEvent.VK_UP)
                      then:  dx=0
                                dy=1
                         else if(key=KeyEvent.VK_DOWN)
                      then:  dx=0
                                 dy=-1
                      else if(key=KeyEvent.VK_P)
                      then:  if(timer.isRunning())
                                   then: timer.stop()
                                   else:  timer.start()
                       endif
                 else: 
                        if(key=KeyEvent.VK_S)
                        then: inGame=true
                                  initGame()
                endif
Step 4: End.
